package contacts

fun main() {
    while (true) {
        print("Enter action (add, remove, edit, count, list, exit): ")
        when (readln()) {
            "add" -> addContact()
            "remove" -> removeContact()
            "edit" -> editContacts()
            "count" -> println("The Phone Book has ${ContactsList.countOfContacts()} records.")
            "list" -> ContactsList.printList()
            "exit" -> break
        }
    }
}

fun addContact() {
    println("Enter the name: ")
    val name = readln()
    println("Enter the surname: ")
    val surname = readln()
    println("Enter the number: ")
    val number = readln()
    if (checkNumber(number)) {
        val contact = Contact(name, surname, number)
        ContactsList.add(contact)
    } else {
        println("Wrong number format!")
        val contact = Contact(name, surname, "[no number]")
        ContactsList.add(contact)
    }
    println("The record added.")
}

fun removeContact() {
    if (ContactsList.countOfContacts() == 0) {
        println("No records to remove!")
        return
    }
    ContactsList.printList()
    println("Select a record: ")
    ContactsList.remove(readln().toInt() - 1)
    println("The record removed!")
}

fun editContacts() {
    if (ContactsList.countOfContacts() == 0) {
        println("No records to edit!")
        return
    }
    ContactsList.printList()
    println("Select a record: ")

    val numberOfList = readln().toInt() - 1
    println("Select a field (name, surname, number):")
    val category = readln()
    println("Enter $category: ")
    val newValue = readln()
    if (checkNumber(newValue)) {
        ContactsList.edit(numberOfList, category, newValue)
    } else {
        println("Wrong number format!")
        ContactsList.edit(numberOfList, category, "[no number]")
    }
    println("The record updated!")
}

fun checkNumber(number: String): Boolean = number.matches(
    "((^\\+?\\(?[A-Za-z0-9]+\\)?([- ][A-Za-z0-9]{2,})?)|(^\\+?[A-Za-z0-9]+([- ]\\(?[A-Za-z0-9]{2,}\\)?)?))([- ][A-Za-z0-9]{2,})*".toRegex())

fun checkIsNumber(str: String): Boolean = str.matches("[0-9]+".toRegex())

object ContactsList {
    private val phoneBook = mutableListOf<Contact>()

    fun countOfContacts(): Int = phoneBook.size

    fun add(contact: Contact): MutableList<Contact> {
        phoneBook.add(contact)
        return phoneBook
    }

    fun remove(number: Int): MutableList<Contact> {
        phoneBook.removeAt(number)
        return phoneBook
    }

    fun edit(numberOfList: Int, category: String, newValue: String): MutableList<Contact> {
        val changeContact = when (category) {
            "name" -> phoneBook[numberOfList].copy(name = newValue)
            "surname" -> phoneBook[numberOfList].copy(surname = newValue)
            "number" -> phoneBook[numberOfList].copy(number = newValue)
            else -> phoneBook[numberOfList]
        }
        phoneBook[numberOfList] = changeContact
        return phoneBook
    }

    fun printList() {
        for (i in phoneBook.indices) {
            println("${i + 1}. ${phoneBook[i].name} ${phoneBook[i].surname}, ${phoneBook[i].number}")
        }
    }
}

data class Contact(
    val name: String,
    val surname: String,
    val number: String
)
