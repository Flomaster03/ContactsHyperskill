package contacts

import java.time.Clock

fun main() {
    while (true) {
        print("Enter action (add, remove, edit, count, info, exit): ")
        when (readln()) {
            "add" -> addContact()
            "remove" -> removeContact()
            "edit" -> editContacts()
            "count" -> println("The Phone Book has ${ContactsList.countOfContacts()} records.")
            "info" -> infoContacts()
            "exit" -> break
        }
    }
}

//добавление контакта
fun addContact() {
    println("Enter the type (person, organization): ")
    if (readln() == "person") addPerson() else addOrganization()
}

//добавление человека
fun addPerson() {
    println("Enter the name: ")
    val name = readln()
    println("Enter the surname: ")
    val surname = readln()
    println("Enter the birth date: ")
    val birthDate = checkAndSetFieldsOfContact("birthDate", readln())
    if (!birthDate.first) println("Bad birth date!")
    println("Enter the gender (M, F): ")
    val gender = checkAndSetFieldsOfContact("gender", readln())
    if (!gender.first) println("Bad gender!")
    println("Enter the number: ")
    val number = checkAndSetFieldsOfContact("number", readln())
    if (!number.first) println("Wrong number format!")
    val contact = Person(name, surname, birthDate.second, gender.second, number.second, getTime(), getTime())
    ContactsList.add(contact)
    println("The record added.\n")
}

//добавление организации
fun addOrganization() {
    println("Enter the organization name: ")
    val name = readln()
    println("Enter the address: ")
    val address = readln()
    println("Enter the number: ")
    val number = checkAndSetFieldsOfContact("number", readln())
    if (!number.first) println("Wrong number format!")
    val contact = Organization(name, address, number.second, getTime(), getTime())
    ContactsList.add(contact)
    println("The record added.\n")
}

//удаление контакта по номеру
fun removeContact() {
    if (ContactsList.countOfContacts() == 0) {
        println("No records to remove!")
        return
    }
    ContactsList.printList()
    println("Select a record: ")
    ContactsList.remove(readln().toInt() - 1)
    println("The record removed!")
}

fun editContacts() {
    if (ContactsList.countOfContacts() == 0) {
        println("No records to edit!")
        return
    }
    ContactsList.printList()
    println("Select a record: ")
    val numberOfList = readln().toInt() - 1
    println(ContactsList.fieldsOfContact(numberOfList)) //печать строки с полями записи для выбора, что менять
    val category = readln()
    println("Enter $category: ") //вводится новое значение для поля
    val newValue = checkAndSetFieldsOfContact(category, readln())
    if (!newValue.first) {
        when (category) {
            "birthDate" -> println("Bad birth date!")
            "gender" -> println("Bad gender!")
            "number" -> println("Wrong number format!")
        }
    }
    val editTime = getTime()
    ContactsList.edit(numberOfList, category, newValue.second, editTime)
    println("The record updated!\n")
}

//информация о контактах, выбор контакта для подробной информации о нем
fun infoContacts() {
    ContactsList.printList()
    println("Enter index to show info: ")
    val numberOfList = readln().toInt() - 1
    ContactsList.printData(numberOfList)
    println()
}

//проверяется значение, введенное пользователем для некоторых полей и в зависимости от валидности устанавливается их значение
fun checkAndSetFieldsOfContact(field: String, value: String): Pair<Boolean, String> {
    return when (field) {
        "birthDate" ->  if (checkBirthDay(value)) Pair(true, value) else Pair(false, "[no data]")
        "gender" -> if (value == "M" || value == "F") Pair(true, value) else Pair(false, "[no data]")
        "number" -> if (checkNumber(value)) Pair(true, value) else Pair(false, "[no number]")
        else -> Pair(true, value)
    }
}

//проверка правильности введенного номера телефона
fun checkNumber(number: String): Boolean = number.matches(
    "((^\\+?\\(?[A-Za-z0-9]+\\)?([- ][A-Za-z0-9]{2,})?)|(^\\+?[A-Za-z0-9]+([- ]\\(?[A-Za-z0-9]{2,}\\)?)?))([- ][A-Za-z0-9]{2,})*".toRegex()
)

//проверка правильности даты рождения
fun checkBirthDay(date: String): Boolean =
    date.matches("""^((19\d\d)|(20[0-2][0-4]))-((1[0-2])|(0[1-9]))-((0[1-9])|([12][0-9])|(3[01]))""".toRegex())

//получение текущего времени системы и конвертация его в строку
fun getTime(): String {
    val date = Clock.systemDefaultZone()
    return date.instant().toString().split(":").toMutableList().also { it.removeAt(2) }.joinToString(":")
}

object ContactsList {
    private val phoneBook = mutableListOf<Contact>()

    //количество контактов в книжке
    fun countOfContacts(): Int = phoneBook.size

    //добавление готовой записи в книжку
    fun add(contact: Contact): MutableList<Contact> {
        phoneBook.add(contact)
        return phoneBook
    }

    //удаление контакта
    fun remove(number: Int): MutableList<Contact> {
        phoneBook.removeAt(number)
        return phoneBook
    }

    //в зависимости от вида контакта выводится строка с перечислением его полей
    fun fieldsOfContact(index: Int): String {
        return if (phoneBook[index] is Person) "Select a field (name, surname, birth, gender, number): " else "Select a field (address, number): "
    }


    //редактирование контакта
    fun edit(index: Int, category: String, newValue: String, time: String): MutableList<Contact> {
        if (phoneBook[index] is Person) {
            var changedContact = phoneBook[index] as Person

            changedContact = when (category) {
                "name" -> changedContact.copy(name = newValue)
                "surname" -> changedContact.copy(surname = newValue)
                "birthDate" -> changedContact.copy(birthDate = newValue)
                "gender" -> changedContact.copy(gender = newValue)
                "number" -> changedContact.copy(number = newValue)
                else -> changedContact
            }
            changedContact = changedContact.copy(timeLastEdit = time)
            phoneBook[index] = changedContact
        }
        if (phoneBook[index] is Organization) {
            var changedContact = phoneBook[index] as Organization
            changedContact = when (category) {
                "name" -> changedContact.copy(name = newValue)
                "address" -> changedContact.copy(address = newValue)
                "number" -> changedContact.copy(number = newValue)
                else -> changedContact
            }
            changedContact = changedContact.copy(timeLastEdit = time)
            phoneBook[index] = changedContact
        }
        return phoneBook
    }

    //печать списка контактов
    fun printList() {
        for (i in phoneBook.indices) {
            if (phoneBook[i] is Person) {
                val person = phoneBook[i] as Person
                println("${i + 1}. ${person.name} ${person.surname}")
            } else {
                println("${i + 1}. ${phoneBook[i].name}")
            }
        }
    }

    //вызов методов печати для человека или организации в зависимости от вида контакта
    fun printData(index: Int) =
        if (phoneBook[index] is Person) printPerson(phoneBook[index] as Person) else printOrganization(phoneBook[index] as Organization)

    //печать полей человека
    private fun printPerson(contact: Person) {
        println("Name: ${contact.name}")
        println("Surname: ${contact.surname}")
        println("Birth date: ${contact.birthDate}")
        println("Gender: ${contact.gender}")
        println("Number: ${contact.number}")
        println("Time created: ${contact.timeCreated}")
        println("Time last edit: ${contact.timeLastEdit}")
    }

    //печать полей организации
    private fun printOrganization(contact: Organization) {
        println("Organization name: ${contact.name}")
        println("Address: ${contact.address}")
        println("Number: ${contact.number}")
        println("Time created: ${contact.timeCreated}")
        println("Time last edit: ${contact.timeLastEdit}")
    }
}

open class Contact(
    open val name: String,
    open val number: String,
    open val timeCreated: String,
    open val timeLastEdit: String
)

data class Organization(
    override val name: String,
    val address: String,
    override val number: String,
    override val timeCreated: String,
    override val timeLastEdit: String
) : Contact(name, number, timeCreated, timeLastEdit)

data class Person(
    override val name: String,
    val surname: String,
    val birthDate: String,
    val gender: String,
    override val number: String,
    override val timeCreated: String,
    override val timeLastEdit: String
) : Contact(name, number, timeCreated, timeLastEdit)
